(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Menu = function () {
    function Menu(setup) {
        _classCallCheck(this, Menu);

        this.MENU_ACTION_CONTENT = 1;
        this.MENU_ACTION_CAMERA = 2;
        this.MENU_ACTION_REMOTE = 3;
        this.MENU_ACTION_MUTE = 4;
        this.setup = setup;
        this.buttons = [];
        this.buttonsGroup = new THREE.Group();
        this.type = "bottom";
        this.createButton(2, "assets/icons/ic_launcher_home.png", this.MENU_ACTION_CONTENT);
        this.createButton(2, "assets/icons/ic_launcher_camera.png", this.MENU_ACTION_CAMERA);
        this.createButton(2, "assets/icons/ic_launcher_remote.png", this.MENU_ACTION_REMOTE);
        this.createButton(2, "assets/icons/ic_launcher_audio_off.png", this.MENU_ACTION_MUTE);
        //this.room.camera.add(this.buttonsGroup);
        this.setBottomMenu();
    }

    _createClass(Menu, [{
        key: "createButton",
        value: function createButton(width, image, action) {
            var innerGeometry = new THREE.CircleGeometry(width / 2, 32);
            var innerMaterial = new THREE.MeshPhongMaterial({
                color: 0xffffff, side: THREE.DoubleSide, transparent: true,
                opacity: 1
            });
            if (image && image != "0") {
                var loader = new THREE.TextureLoader();
                loader.crossOrigin = 'anonymous';
                loader.load(image, function (texture) {
                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                    innerMaterial.map = texture;
                    innerMaterial.map.needsUpdate = true;
                    innerMaterial.needsUpdate = true;
                });
            }
            var inner = new THREE.Mesh(innerGeometry, innerMaterial);
            inner.name = 'inner';
            var outerMaterial = new THREE.MeshBasicMaterial({
                color: 0x000000, side: THREE.DoubleSide, transparent: true,
                opacity: 1
            });
            var outerGeometry = new THREE.RingGeometry(width / 2 * 0.85, width / 2, 32);
            var outer = new THREE.Mesh(outerGeometry, outerMaterial);
            outer.name = 'outer';
            outer.position.z = 1;
            var button = new THREE.Object3D();
            button.add(inner);
            button.add(outer);
            this.buttons.push({ button: button, action: action });
            this.buttonsGroup.add(button);
            return button;
        }
    }, {
        key: "setBottomMenu",
        value: function setBottomMenu() {
            var that = this;
            this.setup.camera.remove(this.buttonsGroup);
            this.setup.cameraDummy.add(this.buttonsGroup);
            this.buttonsGroup.rotation.set(0, 0, 0);
            this.buttonsGroup.position.set(0, 0, 0);
            this.buttons.forEach(function (button, i) {
                button.button.rotation.set(-Math.PI / 2, 0, 0);
                var angle = 360 * (i / 10) + 220;
                button.button.position.y = -10;
                button.button.position.z = 3.8 * Math.sin(angle * Math.PI / 180);
                button.button.position.x = 3.8 * Math.cos(angle * Math.PI / 180);
                //  button.lookAt(that.room.camera.position);
                that.setOpacity(button.button, 0);
            });
            this.type = "bottom";
        }
    }, {
        key: "setArmMenu",
        value: function setArmMenu() {
            this.setup.cameraDummy.remove(this.buttonsGroup);
            this.setup.camera.add(this.buttonsGroup);
            // if(!(this.setup.multiplayer.hands.leftArmMesh)){
            //     if(!(this.setup.camera.armMeshes))this.room.camera.armMeshes = [];
            //     this.setup.multiplayer.hands.leftArmMesh = this.room.camera.armMeshes [ 0 ] || this.room.multiplayer.hands.addBoneMesh( this.room.camera.armMeshes );
            //     this.setup.multiplayer.hands.leftArmMesh.rotation.z=-Math.PI;
            // }
            var that = this;
            this.buttons.forEach(function (button, i) {
                button.rotation.set(0, 0, 0);
                button.position.y = 0;
                button.position.z = 3 * i - 25;
                button.position.x = -9;
                button.rotation.set(Math.PI / 2, 0, 0);
                that.setOpacity(button, 0);
            });
            this.type = "arm";
        }
    }, {
        key: "fadeArmButtons",
        value: function fadeArmButtons() {
            var that = this;
            var angleDeg = 180 /*+Math.radToDeg(this.room.multiplayer.hands.leftArmMesh.rotation.z)*/;
            var opacity;
            if (angleDeg < 0) {
                opacity = 0;
            } else if (angleDeg > 180) {
                opacity = 0;
            } else if (angleDeg > 90) {
                opacity = 1;
            } else {
                // We are in the case START < angle < END. Linearly interpolate.
                var range = 60;
                var value = angleDeg;
                opacity = value / range;
            }
            this.buttons.forEach(function (button) {
                that.setOpacity(button, opacity);
            });
        }
    }, {
        key: "setOpacity",
        value: function setOpacity(button, opacity) {
            var outer = button.getObjectByName('outer');
            var inner = button.getObjectByName('inner');
            outer.material.opacity = opacity * 0.5;
            inner.material.opacity = opacity * 0.8;
        }
    }, {
        key: "fadeBottomButtons",
        value: function fadeBottomButtons(camera) {
            var lookAt = new THREE.Vector3(0, 0, 1);
            lookAt.applyQuaternion(camera.quaternion);
            var that = this;
            this.buttons.forEach(function (button) {
                var angle = button.button.position.angleTo(lookAt);
                var angleDeg = THREE.Math.radToDeg(angle);
                var opacity;
                angleDeg = 210 - angleDeg;
                if (angleDeg < 35) {
                    opacity = 1;
                    button.button.children[0].material.shininess = 50;
                    that.active = button.action;
                } else if (angleDeg > 60) {
                    button.button.children[0].material.shininess = 0;
                    that.active = undefined;
                    opacity = 0;
                } else {
                    // We are in the case START < angle < END. Linearly interpolate.
                    var range = 60 - 30;
                    var value = 60 - angleDeg;
                    opacity = value / range;
                }
                that.setOpacity(button.button, opacity);
            });
        }
    }, {
        key: "action",
        value: function action() {
            if (this.active) {
                switch (this.active) {
                    case this.MENU_ACTION_CONTENT:
                        // if(this.room.content.isOpen){
                        //     this.room.content.close();
                        // }else{
                        //     this.room.content.open();
                        // }
                        break;
                    case this.MENU_ACTION_CAMERA:
                        // if(this.room.selfieCamera.isOpen){
                        //     this.room.selfieCamera.close();
                        // }else{
                        //     this.room.selfieCamera.open(this.room.camera.position);
                        // }
                        break;
                    case this.MENU_ACTION_REMOTE:
                        // if(this.room.airmouse.isEnabled){
                        //     this.room.airmouse.disable();
                        // }else{
                        //     this.room.airmouse.enable();
                        // }
                        break;
                    case this.MENU_ACTION_MUTE:
                        break;
                }
            }
        }
    }, {
        key: "render",
        value: function render() {
            if (this.type == "bottom") {
                this.fadeBottomButtons(this.setup.camera);
            } else {
                this.fadeArmButtons();
            }
        }
    }]);

    return Menu;
}();

exports.Menu = Menu;

},{}],2:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Mirror = function () {
    function Mirror(setup) {
        _classCallCheck(this, Mirror);

        this.isOpen = false;
        this.close = function () {
            this.isOpen = false;
            this.setup.scene.remove(this.cubeCamera);
            this.setup.scene.remove(this.mirror);
        };
        this.setup = setup;
        var mirrorMaterial = new THREE.MeshBasicMaterial({ side: THREE.DoubleSide });
        var mirrorGeom = new THREE.PlaneGeometry(10, 10);
        this.mirror = new THREE.Mesh(mirrorGeom, mirrorMaterial);
        // this.mirror.rotateX( - Math.PI / 2 );
        this.cubeCamera = new THREE.CubeCamera(0.1, 10000, 1280);
        this.cubeCamera.layers.enable(1);
        this.cubeCamera.renderTarget.texture.minFilter = THREE.LinearMipMapLinearFilter;
        mirrorMaterial.envMap = this.cubeCamera.renderTarget.texture;
    }

    _createClass(Mirror, [{
        key: "open",
        value: function open(position) {
            this.isOpen = true;
            this.mirror.position.copy(position);
            this.mirror.position.z -= 15;
            this.mirror.position.x -= 13;
            this.mirror.position.y += 0;
            this.mirror.lookAt(this.setup.cameraDummy.position);
            this.cubeCamera.lookAt(this.setup.cameraDummy.position);
            this.setup.scene.add(this.cubeCamera);
            this.setup.scene.add(this.mirror);
        }
    }, {
        key: "render",
        value: function render() {
            this.mirror.visible = false;
            //this.mirror.rotation.y+=0.001
            //if(this.setup.sphere.sphereSpare)this.scope.sphere.sphereSpare.visible = true;
            this.cubeCamera.position.copy(this.mirror.position);
            this.cubeCamera.updateCubeMap(this.setup.renderer, this.setup.scene);
            // if(this.scope.sphere.sphereSpare)this.scope.sphere.sphereSpare.visible = false;
            this.mirror.visible = true;
        }
    }]);

    return Mirror;
}();

exports.Mirror = Mirror;

},{}],3:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var People = function () {
    function People(setup) {
        _classCallCheck(this, People);

        this.me = {
            name: "Not Set",
            faceImage: false,
            face: "",
            position: {
                x: 0,
                y: 0,
                z: 0
            },
            quaternion: {
                w: 0,
                x: 0,
                y: 0,
                z: 0
            },
            leftArm: [],
            rightArm: [],
            seatNumber: 0,
            socketId: 0
        };
        this.setup = setup;
        this.players = {};
    }

    _createClass(People, [{
        key: "setMe",
        value: function setMe(name, face) {
            this.me.name = name;
            this.me.face = face;
        }
    }, {
        key: "render",
        value: function render() {
            // Update each player orientation from the "me" object stored in the sub-property "person".
            var that = this;
            for (var id in this.players) {
                var player = this.players[id];
                player.quaternion.copy(player.person.quaternion);
                if (player.person.socketId != this.me.socketId && player.sound) {
                    // that.scope.dataChannel.setSoundPosition(player,player.context,player.sound.panner,false);
                    // that.scope.dataChannel.setSoundOrientation(player,player.context,player.sound.panner,false);
                    // that.scope.dataChannel.setSoundPosition(this.scope.camera,player.context,player.sound.panner,true);
                    // that.scope.dataChannel.setSoundOrientation(this.scope.camera,player.context,player.sound.panner,true);
                }
            }
            // Set the "me" position from the current camera position.
            this.me.position = {
                x: this.setup.camera.position.x,
                y: this.setup.camera.position.y,
                z: this.setup.camera.position.z
            };
            // Set the "me" orientation from the current camera quaternion.
            this.me.quaternion = {
                w: this.setup.camera.quaternion._w,
                x: this.setup.camera.quaternion._x,
                y: this.setup.camera.quaternion._y,
                z: this.setup.camera.quaternion._z
            };
            this.renderPerson(this.me);
        }
    }, {
        key: "loadObject",
        value: function loadObject(texture) {
            var that = this;
            return new Promise(function (resolve) {
                // var onProgress = function ( xhr ) {
                //     if ( xhr.lengthComputable ) {
                //         var percentComplete = xhr.loaded / xhr.total * 100;
                //         console.log( Math.round(percentComplete) + '% downloaded' );
                //     }
                // };
                // var onError = function ( xhr ) {
                // };
                var points = [];
                for (var deg = 0; deg <= 180; deg += 6) {
                    var rad = Math.PI * deg / 180;
                    var point = new THREE.Vector2((1.22 - .05 * Math.cos(rad)) * Math.sin(rad), -Math.cos(rad)); // the "egg equation"
                    //console.log( point ); // x-coord should be greater than zero to avoid degenerate triangles; it is not in this formula.
                    points.push(point);
                }
                resolve(new THREE.Mesh(new THREE.LatheBufferGeometry(points, 32), new THREE.MeshBasicMaterial({ color: 0xffffff, map: texture })));
                // var loader = new THREE.STLLoader();
                // loader.load( 'assets/models/head.stl', function ( object ) {
                //     resolve(new THREE.Mesh(object,new THREE.MeshPhongMaterial( { color: 0xffffff, map: texture } )));
                //     // object.traverse( function ( child ) {
                //     //     if ( child instanceof THREE.Mesh ) {
                //     //         // child.geometry.computeVertexNormals();
                //     //         // child.geometry.computeFaceNormals();
                //     //         //child.geometry.needsUpdate=true;
                //     //
                //     //         child.material.map = texture;
                //     //         texture.needsUpdate = true;
                //     //         resolve(child);//new THREE.Mesh(child.geometry,new THREE.MeshPhongMaterial( { color: 0xffffff, map: texture } )));
                //     //     }
                //     // } );
                // }, onProgress, onError );
            });
        }
    }, {
        key: "renderPerson",
        value: function renderPerson(person) {
            var that = this;
            // person base position from seatnumber.
            var angle = 360 * (person.seatNumber / 4);
            if (!this.players[person.socketId]) {
                //base mesh by Samuel Sharit
                // var geometry = new THREE.SphereGeometry( 15, 24, 24 );
                // var material = new THREE.MeshPhongMaterial( {} );
                // geometry.applyMatrix( new THREE.Matrix4().makeScale( 1.0, 1.2, 0.2 ) );
                var cube = new THREE.Group();
                //cube.cube = new THREE.Mesh( geometry, material );
                cube.leftMeshes = [];
                cube.rightMeshes = [];
                cube.originalPosition = { x: 60 * Math.cos(angle * (Math.PI / 180)), z: 60 * Math.sin(angle * (Math.PI / 180)) };
                cube.position.set(cube.originalPosition.x, 0, cube.originalPosition.z);
                cube.person = person;
                this.players[person.socketId] = cube;
                this.setup.scene.add(cube);
                var loader = new THREE.TextureLoader();
                loader.crossOrigin = 'anonymous';
                loader.load(person.face, function (texture) {
                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                    //texture.offset.y = 0.3;
                    texture.offset.x = -0.25;
                    // cube.cube.material.map = texture;
                    texture.repeat.set(1.5, 1);
                    that.loadObject(texture).then(function (object) {
                        object.scale.set(5, 5, 5);
                        cube.head = object;
                        cube.add(cube.head);
                    });
                    // texture.needsUpdate=true;
                    // cube.cube.material.needsUpdate=true;
                });
            } else {
                this.players[person.socketId].person = person;
            }
            if (person.socketId != this.me.socketId) {
                if (this.players[person.socketId]) {
                    //this.hands.render(this.players[person.socketId],person,false,"other");
                }
            } else {
                var originalPosition = { x: 60 * Math.cos(angle * Math.PI / 180), z: 60 * Math.sin(angle * Math.PI / 180) };
                this.setup.cameraDummy.position.x = originalPosition.x;
                this.setup.cameraDummy.position.z = originalPosition.z;
            }
            //}
            //for(var id in MultiplayerMode.prototype.players){
            //    if(!(id in room.people)){
            //        this.room.scene.remove( MultiplayerMode.prototype.players[id] );
            //        delete MultiplayerMode.prototype.players[id];
            //    }
            //}
        }
    }]);

    return People;
}();

exports.People = People;

},{}],4:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Reticle = function Reticle(camera) {
    _classCallCheck(this, Reticle);

    var geometry = new THREE.RingGeometry(0.01, 0.02, 32); //new THREE.TorusGeometry(0.01, 0.005, 10, 20);
    var material = new THREE.MeshBasicMaterial({ color: 0x0000ff });
    var reticle = new THREE.Mesh(geometry, material);
    reticle.position.z = -3;
    camera.add(reticle);
};

exports.Reticle = Reticle;

},{}],5:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var reticle_class_1 = require("./reticle.class");
var skybox_class_1 = require("./skybox.class");
var menu_class_1 = require("./menu.class");
var mirror_class_1 = require("./mirror.class");
var people_class_1 = require("./people.class");

var Setup = function () {
    function Setup() {
        var _this = this;

        _classCallCheck(this, Setup);

        this.setupSceneAndCamera();
        this.setupLighting();
        this.skybox = new skybox_class_1.Skybox(this, '/assets/picture/paris.jpg');
        this.menu = new menu_class_1.Menu(this);
        this.selfie_camera = new mirror_class_1.Mirror(this);
        //this.vnc = new VNC(this);
        this.reticle = new reticle_class_1.Reticle(this.camera);
        this.people = new people_class_1.People(this);
        this.setupTerrainAndMountains();
        //this.setupSpinningRings();
        this.scene.fog = new THREE.Fog(0xffffff, 0.015, 1000);
        window.addEventListener("resize", this.windowResize.bind(this));
        this.setupWebVR().then(function () {
            _this.people.setMe("Shane", "assets/avatars/2.png");
            //this.vnc.addVNC('192.168.0.8','8080','Slomosha1','websockify');
            _this.selfie_camera.open(_this.camera.position);
            _this.selfie_camera.mirror.lookAt(_this.cameraDummy.position);
            //var loader = new THREE.ColladaLoader();
            //loader.options.convertUpAxis = true;
            //loader.load( '/assets/models/CasteliaCity.dae', ( collada ) =>{
            //    var object = collada.scene;
            //    //object.scale.set( 0.0025, 0.0025, 0.0025 );
            //    //object.position.set( - 2, 0.2, 0 );
            //    this.scene.add( object );
            //} );
        });
    }

    _createClass(Setup, [{
        key: "setupSpinningRings",
        value: function setupSpinningRings() {
            this.group = new THREE.Group();
            this.scene.add(this.group);
            this.group.position.y = 50;
            this.group.position.z = -100;
            this.group.scale.set(0.25, 0.25, 0.25);
            var geometry = new THREE.RingGeometry(20, 22, 32, 32);
            var textureLoader = new THREE.TextureLoader();
            var material = new THREE.MeshPhongMaterial({
                shininess: 0.99,
                emissive: 0x000000,
                reflectivity: 0.99,
                map: textureLoader.load("/assets/picture/map.png"),
                emissiveMap: textureLoader.load("/assets/picture/emissive.png")
            });
            var torus = new THREE.Mesh(geometry, material);
            // map.magFilter = THREE.NearestFilter;
            torus.material.emissiveMap.wrapS = THREE.RepeatWrapping;
            torus.material.emissiveMap.repeat.x = 2;
            for (var i = 0; i < 10; i++) {
                var clone = torus.clone();
                clone.geometry = new THREE.TorusGeometry(i * 10 + 20, 5, 32, 64);
                clone.material = torus.material.clone();
                this.group.add(clone);
            }
        }
    }, {
        key: "renderSpinningRings",
        value: function renderSpinningRings(time) {
            var children = this.group.children;
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                child.position.x = Math.sin(time - i * 0.15) * 50;
                child.position.y = Math.sin(time * 1.3 - i * 0.15) * 50;
                child.rotation.x = time * 2.123 - Math.pow(i, 1.15) * 0.15;
                child.rotation.y = time * 3 - Math.pow(i, 1.15) * 0.15;
                child.material.emissive.r = Math.max(0, Math.sin(-time * 5 + i * 0.2)) * 0.5;
                child.material.emissive.b = Math.pow(child.material.emissive.r * 2, 6);
            }
        }
    }, {
        key: "setupTerrainAndMountains",
        value: function setupTerrainAndMountains() {
            var geometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);
            var textureLoader = new THREE.TextureLoader();
            var material = new THREE.MeshPhongMaterial({
                //color: 0x222923,
                // specular: 0x222923,
                // shininess: 35,
                map: textureLoader.load("/assets/textures/rough-cobblestones/brick_floor_tileable_Base_Color.jpg"),
                displacementMap: textureLoader.load("/assets/textures/rough-cobblestones/brick_floor_tileable_Displacement.jpg"),
                normalMap: textureLoader.load("/assets/textures/rough-cobblestones/brick_floor_tileable_Normal.jpg"),
                //specularMap: textureLoader.load( "/assets/textures/rough-cobblestones/brick_floor_tileable_Ambient_Occlusion.jpg" ),//
                normalScale: new THREE.Vector2(0.8, 0.8)
            });
            material.map.wrapS = material.map.wrapT = material.displacementMap.wrapS = material.displacementMap.wrapT = material.normalMap.wrapS = material.normalMap.wrapT = THREE.RepeatWrapping;
            material.map.needsUpdate = true;
            material.displacementMap.needsUpdate = true;
            material.normalMap.needsUpdate = true;
            material.map.repeat.set(10, 10);
            material.displacementMap.repeat.set(10, 10);
            material.normalMap.repeat.set(10, 10);
            var geo = geometry;
            geo.vertices.forEach(function (vert, i) {
                if (Math.abs(vert.y) > 300 || Math.abs(vert.x) > 300) {
                    //geo.vertices[i].z -= 20;
                }
            });
            geo.computeVertexNormals();
            geo.computeFaceNormals();
            geo.verticesNeedUpdate = true;
            geo.normalsNeedUpdate = true;
            //
            // var
            //
            // newx = distance * Math.cos(direction) + x
            // newy = distance * Math.sin(direction) + y
            var plane = new THREE.Mesh(geometry, material);
            plane.position.y = -15;
            plane.rotation.x = Math.PI + Math.PI / 2;
            this.scene.add(plane);
            material = new THREE.MeshPhongMaterial({
                color: 0x020403
            });
            var nClusters = 60,
                nPerCluster = 8,
                heightMin = 10,
                heightMax = 80,
                radiusBottomMin = 10,
                radiusBottomMax = 30,
                mountainRadius = 300;
            for (var i = 0; i < nClusters; i++) {
                var angle = i / nClusters * (Math.PI * 2);
                for (var j = 0; j < nPerCluster; j++) {
                    var deltaAngle = THREE.Math.randFloatSpread(2 / nClusters) * (Math.PI * 2);
                    var height = THREE.Math.randFloat(heightMin, heightMax);
                    var radiusBottom = THREE.Math.randFloat(radiusBottomMin, radiusBottomMax);
                    var geom = new THREE.Geometry();
                    var v1 = new THREE.Vector3(0, 0, 0);
                    var v2 = new THREE.Vector3(radiusBottom * 2, 0, 0);
                    var v3 = new THREE.Vector3(radiusBottom, height, 0);
                    geom.vertices.push(v1);
                    geom.vertices.push(v2);
                    geom.vertices.push(v3);
                    geom.faces.push(new THREE.Face3(0, 1, 2));
                    geom.computeFaceNormals();
                    var mesh = new THREE.Mesh(geom, material);
                    mesh.position.y = -15;
                    mesh.position.x = (mountainRadius + Math.random() * 20) * Math.cos(angle + deltaAngle);
                    mesh.position.z = (mountainRadius + Math.random() * 20) * Math.sin(angle + deltaAngle);
                    mesh.lookAt(this.scene.position);
                    this.scene.add(mesh);
                }
            }
        }
    }, {
        key: "setupSceneAndCamera",
        value: function setupSceneAndCamera() {
            this.scene = new THREE.Scene();
            // this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );
            // //this.camera.position.z=200;
            // this.camera.lookAt(new THREE.Vector3(0,0,0));
            // this.renderer = new THREE.WebGLRenderer();
            // this.renderer.setSize(window.innerWidth,window.innerHeight);
            // this.canvas = document.createElement('canvas');
            // document.body.appendChild(this.renderer.domElement);
            // window.addEventListener( 'resize', this.windowResize.bind(this), false );
            // return this.renderer.domElement;
            this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100000);
            this.cameraDummy = new THREE.Object3D();
            this.cameraDummy.add(this.camera);
            this.scene.add(this.cameraDummy);
            this.renderer = new THREE.WebGLRenderer();
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.canvas = document.createElement('canvas');
            document.body.appendChild(this.renderer.domElement);
        }
    }, {
        key: "setupLighting",
        value: function setupLighting() {
            var fr_light = new THREE.PointLight(0xFFFFFF);
            fr_light.position.y = 500;
            fr_light.position.x = -100;
            fr_light.position.z = 100;
            this.scene.add(fr_light);
            var bl_light = new THREE.PointLight(0xFFFFFF);
            bl_light.position.y = -500;
            bl_light.position.x = -100;
            bl_light.position.z = -100;
            this.scene.add(bl_light);
            this.light = new THREE.PointLight(0xFFFFFF);
            this.light.position.y = 50;
            this.scene.add(this.light);
        }
    }, {
        key: "setupWebVR",
        value: function setupWebVR() {
            var _this2 = this;

            this.controls = new THREE.VRControls(this.camera);
            this.controls.standing = true;
            this.camera.position.y = this.controls.userHeight;
            this.camera.layers.enable(1);
            this.effect = new THREE.VREffect(this.renderer);
            this.effect.setSize(window.innerWidth, window.innerHeight);
            //mesh.rotation.y += Math.PI;
            this.vrButton = new webvrui.EnterVRButton(this.renderer.domElement, {
                color: 'black',
                background: 'white',
                corners: 'square'
            });
            this.vrButton.on('exit', function () {
                _this2.camera.quaternion.set(0, 0, 0, 1);
                _this2.camera.position.set(0, _this2.controls.userHeight, 0);
            });
            this.vrButton.on('hide', function () {
                document.getElementById('ui').style.display = 'none';
            });
            this.vrButton.on('show', function () {
                document.getElementById('ui').style.display = 'inherit';
            });
            //this.manager = new WebVRManager(this.renderer, this.effect, {predistorted: false});
            document.getElementById('vr-button').appendChild(this.vrButton.domElement);
            document.getElementById('magic-window').addEventListener('click', function () {
                _this2.vrButton.requestEnterFullscreen();
            });
            return navigator.getVRDisplays().then(function (displays) {
                if (displays.length > 0) {
                    _this2.vrDisplay = displays[0];
                    _this2.vrDisplay.requestAnimationFrame(_this2.animate.bind(_this2));
                }
            });
        }
    }, {
        key: "animate",
        value: function animate(time) {
            //mesh.rotation.y += 0.0005;
            // if(document.body.className == 'is_running'){
            //     texture.needsUpdate = true;
            // }
            //if (this.vrButton.isPresenting()) {
            this.vrDisplay.requestAnimationFrame(this.animate.bind(this));
            this.controls.update();
            //}
            this.menu.render();
            // if(altspace&&altspace.getThreeJSRenderer) {
            //     this.waitForJoint('Head','Center')
            //         .then((joint:any)=>{
            //             this.menu.menu_system.quaternion.copy(joint.quaternion);
            //             this.menu.menu_system.rotation.z=-Math.PI;
            //             this.menu.menu_system.rotation.x=-Math.PI;
            //             this.menu.menu_system.position.copy(joint.position);
            //         });
            //     this.renderer.render(this.scene);
            // }else{
            //     this.renderer.render(this.scene,this.camera);
            // }
            //this.skybox.render();
            this.selfie_camera.render();
            this.people.render();
            //this.vnc.render();
            this.selfie_camera.mirror.lookAt(this.cameraDummy.position);
            this.effect.render(this.scene, this.camera);
        }
    }, {
        key: "windowResize",
        value: function windowResize() {
            this.camera.aspect = window.innerWidth / window.innerHeight;
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.effect.setSize(window.innerWidth, window.innerHeight);
            this.camera.updateProjectionMatrix();
        }
    }]);

    return Setup;
}();

exports.Setup = Setup;

},{"./menu.class":1,"./mirror.class":2,"./people.class":3,"./reticle.class":4,"./skybox.class":6}],6:[function(require,module,exports){
"use strict";
/**
 * Created by autoc on 03/06/2017.
 */

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });

var Skybox = function () {
    function Skybox(setup, image) {
        _classCallCheck(this, Skybox);

        this.is_stereo = false;
        this.loader = new THREE.TextureLoader();
        var geo = new THREE.SphereGeometry(500, 700, 4);
        this.skybox_mat = new THREE.MeshBasicMaterial({ side: THREE.BackSide, map: new THREE.TextureLoader().load(image) });
        var skybox = new THREE.Mesh(geo, this.skybox_mat);
        setup.scene.add(skybox);
    }

    _createClass(Skybox, [{
        key: "update",
        value: function update(image) {
            var _this = this;

            this.loader.load(image, function (texture) {
                texture.needsUpdate = true;
                _this.skybox_mat.map = texture;
            });
        }
    }]);

    return Skybox;
}();

exports.Skybox = Skybox;

},{}],7:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var setup_class_1 = require("./app/setup.class");

var Main = function Main() {
    _classCallCheck(this, Main);

    this.setup = new setup_class_1.Setup();
};

exports.Main = Main;
var main = new Main();

},{"./app/setup.class":5}]},{},[7])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
